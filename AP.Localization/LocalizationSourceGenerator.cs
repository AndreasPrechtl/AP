using Microsoft.CodeAnalysis;
using System.Text;

namespace AP.Localization
{
    [Generator]    
    public class LocalizationSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // create the classes and fill content
            var sb = new StringBuilder();

            var classTemplate = """
                // <auto-generated />
                using AP.Localization;
                namespace ${Namespace};                                
                
                public sealed class ${ClassName} : TranslationStoreBase<${ClassName}>
                {       
                    ${Fields}
                    
                    public ${ClassName}(ICultureProvider cultureProvider)
                        : base(cultureProvider) 
                    {                                                
                        base.Translations = new Dictionary<string, Func<TranslationValue>>
                        {
                            ${translationsDictionaryEntries}
                        };
                    }
                                    
                    ${Properties}
                }
                """;

            var fieldTemplate = """
                    private readonly TranslationValue _${TranslationName} = new() 
                    { 
                        Key = ${TranslationName}, 
                        ${TranslationValueTemplates}
                    };
                """;

            var propertyTemplate = """                    
                    public string ${TranslationName} { get { return _${TranslationName}[this.CultureProvider.Culture]; } }
                """;

            var dictionaryEntryTemplate = "{ nameof(${TranslationName}), () => this.${TranslationName} },";

            var fieldsBuilder = new StringBuilder();
            var propertiesBuilder = new StringBuilder();
            var dictionaryEntriesBuilder = new StringBuilder();

            // build dictionary entries and properties
            foreach (var translation in Translations)
            {
                var name = translation.Key;

                fieldsBuilder.Append(fieldTemplate.Replace("${TranslationName}", name));
                
                var valueInitializerBuilder = new StringBuilder();

                foreach (var language in translation.Value)
                {
                    valueInitializerBuilder.AppendLine($"{language.locale} = {language.value},");
                }

                // remove the last ', '
                valueInitializerBuilder.Remove(valueInitializerBuilder.Length - 2, 2);

                fieldsBuilder.Replace("${TranslationValueTemplates}", valueInitializerBuilder.ToString());

                propertiesBuilder.AppendLine(propertyTemplate.Replace("${TranslationName}", name));
                
                dictionaryEntriesBuilder.AppendLine(dictionaryEntryTemplate.Replace("${TranslationName}", name));
            }
            dictionaryEntriesBuilder.Remove(dictionaryEntriesBuilder.Length - 2, 2);

            var classBuilder = new StringBuilder(classTemplate)
                .Replace("${Namespace}", this.Namespace)
                .Replace("${ClassName}", this.ClassName)
                .Replace("${translationsDictionaryEntries}", dictionaryEntriesBuilder.ToString())
                .Replace("${Properties}", propertiesBuilder.ToString());
                
            context.AddSource($"{Namespace}.{ClassName}.g.cs", classBuilder.ToString());
        }


        private readonly Dictionary<string, (string locale, string value)[]> Translations;            
        private string Namespace { get; set; }
        private string ClassName { get; set; }
        public IReadOnlyList<string> Languages { get; private set; }

        public void Initialize(GeneratorInitializationContext context)
        {
            // do some csv file reading and bla bla bla
            this.Languages = this.LoadLanguagesInternal();

            Translations.Add("FooBar",
                new[]
                {
                    ("de_DE", "des is deitsch"),
                    ("en_US", "this is very english")
                });
            Translations.Add("BloodBath",
                new[]
                {
                    ("en_US", "this is very english")
                });
            Translations.Add("Schmarrn",
                new[]
                {
                    ("de_DE", "so a grampf")
                });
        }
        
        private IReadOnlyList<string> LoadLanguagesInternal() => new string[] { "Default" }.Concat(this.LoadLanguages()).ToArray();
        protected virtual IReadOnlyList<string> LoadLanguages() => new string[] { "de_DE", "en_US" };
    }
}